CREATE PROCEDURE `PROJECT_ID`.D1_PHM_CONFDIM_MATERIAL.SP_MATERIAL_PRICING_VF_INITIAL_LOAD()
BEGIN

/***********************************************************************************************************************
Author: Gopalakrishnan Thangavel
Creation Date: 06/22/2023
Data Sources:
*************************************************************************
Change History		[DATE]			[CHANGED BY]	[JIRA#]		[CODE REVIEW BY]		[DESCRIPTION]
	<#>					<MM/DD/YYYY>	<Name>			<ID>

************************************************************************************************************************/

DECLARE v_start_time datetime;
DECLARE v_start_stp timestamp;
DECLARE v_end_stp timestamp;
DECLARE v_stored_proc_name string;

SET v_start_time = current_datetime();
SET v_start_stp = CURRENT_TIMESTAMP;
SET v_end_stp = (SELECT CAST('9999-12-31 23:59:59' AS TIMESTAMP));
SET v_stored_proc_name = 'D1_PHM_CONFDIM_MATERIAL.SP_MATERIAL_PRICING_VF_INITIAL_LOAD';

-- To get the values from the table A921_CV,KONP_CV
CREATE OR REPLACE TEMPORARY TABLE PRICES
AS
(
  SELECT
			A921.MATNR AS MATNR_A921,
			SAFE_CAST(A921.DATAB AS DATE FORMAT 'YYYYMMDD')  AS VRSN_START_DTE,
			SAFE_CAST(A921.DATBI AS DATE FORMAT 'YYYYMMDD')  AS VRSN_END_DTE,
			SUM(CASE WHEN A921.KSCHL = 'ZBA0' THEN KONP.KBETR ELSE 0 END) AS ZBA0,
			SUM(CASE WHEN A921.KSCHL = 'ZBA2' THEN KONP.KBETR ELSE 0 END) AS ZBA2,
			SUM(CASE WHEN A921.KSCHL = 'ZTF0' THEN KONP.KBETR ELSE 0 END) AS ZTF0,
			SUM(CASE WHEN A921.KSCHL = 'ZREF' THEN KONP.KBETR ELSE 0 END) AS ZREF,
			SUM(CASE WHEN A921.KSCHL = 'ZMSR' THEN KONP.KBETR ELSE 0 END) AS ZMSR,
			MAX(CASE WHEN A921.KSCHL = 'ZBA0' THEN SAFE_CAST(KONH.ERDAT AS DATE FORMAT 'YYYYMMDD') ELSE DATE '1900-01-01' END) AS ZBA0_CRT_DTE,
			  MAX(CASE WHEN A921.KSCHL = 'ZBA2' THEN SAFE_CAST(KONH.ERDAT AS DATE FORMAT 'YYYYMMDD') ELSE DATE '1900-01-01' END) AS ZBA2_CRT_DTE,
			  MAX(CASE WHEN A921.KSCHL = 'ZTF0' THEN SAFE_CAST(KONH.ERDAT AS DATE FORMAT 'YYYYMMDD') ELSE DATE '1900-01-01' END) AS ZTF0_CRT_DTE,
			  MAX(CASE WHEN A921.KSCHL = 'ZREF' THEN SAFE_CAST(KONH.ERDAT AS DATE FORMAT 'YYYYMMDD') ELSE DATE '1900-01-01' END) AS ZREF_CRT_DTE,
			  MAX(CASE WHEN A921.KSCHL = 'ZMSR' THEN SAFE_CAST(KONH.ERDAT AS DATE FORMAT 'YYYYMMDD') ELSE DATE '1900-01-01' END) AS ZMSR_CRT_DTE

	FROM
		`PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__A921_CV` A921
	INNER JOIN
		`PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__KONP_CV` KONP ON A921.KNUMH = KONP.KNUMH
	INNER JOIN
		`PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__KONH_CV` KONH ON A921.KNUMH = KONH.KNUMH
	WHERE
		A921.KSCHL IN ('ZBA0', 'ZBA2', 'ZTF0', 'ZREF', 'ZMSR')
		-- AND A921.MATNR in ('000000000004278057')
		--AND A921.MATNR in ('000000000004278057') --,'000000000004278107','000000000001048115')
			--ZBA0 - WAC
			--ZBA2 - Discounted WAC Amount
			--ZTF0 - Excise Tax
			--ZREF - Reference Price (Cardinal AWP)
			--ZMSR - Manufacturer Suggest Retail Price (MSRP)
	GROUP BY 1, 2, 3
  ORDER BY 2
);

-- To get the value from intersecting date
CREATE OR REPLACE TEMPORARY TABLE UPDATE_TEMP
AS
(
WITH sub_query AS
(
SELECT *,RANK() OVER(PARTITION BY MATNR_A921 ORDER BY VRSN_START_DTE, VRSN_END_DTE) AS r
FROM PRICES
),
final_query AS (
SELECT
	sub_query_1.MATNR_A921,
	sub_query_1.VRSN_START_DTE,
	sub_query_1.VRSN_END_DTE,
	sub_query_1.ZBA0,
	sub_query_1.ZBA2,
	sub_query_1.ZTF0,
	sub_query_1.ZREF,
	sub_query_1.ZMSR,
	SUM(sub_query_2.ZBA0) AS sub_ZBA0,
	SUM(sub_query_2.ZBA2) AS sub_ZBA2,
	SUM(sub_query_2.ZTF0) AS sub_ZTF0,
	SUM(sub_query_2.ZREF) AS sub_ZREF,
	SUM(sub_query_2.ZMSR) AS sub_ZMSR

FROM
	sub_query AS sub_query_1
JOIN
	sub_query AS sub_query_2
ON
	sub_query_1.MATNR_A921 = sub_query_2.MATNR_A921
AND
	sub_query_1.r != sub_query_2.r
AND
(
	sub_query_1.VRSN_START_DTE >= sub_query_2.VRSN_START_DTE AND
	sub_query_1.VRSN_END_DTE <= sub_query_2.VRSN_END_DTE )

GROUP BY 1,2,3,4,5,6,7,8
)
SELECT
MATNR_A921,
	VRSN_START_DTE,
	VRSN_END_DTE,
	ZBA0+sub_ZBA0 AS ZBA0,
	ZBA2+sub_ZBA2 AS ZBA2,
	ZTF0+sub_ZTF0 AS ZTF0,
	ZREF+sub_ZREF AS ZREF,
	ZMSR+sub_ZMSR AS ZMSR
FROM final_query
)
;

-- update it with main rows
UPDATE PRICES
SET
	ZBA0 = UPDATE_TEMP.ZBA0,
	ZBA2 = UPDATE_TEMP.ZBA2,
	ZTF0 = UPDATE_TEMP.ZTF0,
	ZREF = UPDATE_TEMP.ZREF,
	ZMSR = UPDATE_TEMP.ZMSR
FROM
	UPDATE_TEMP
WHERE
	PRICES.MATNR_A921=UPDATE_TEMP.MATNR_A921 AND PRICES.VRSN_START_DTE=UPDATE_TEMP.VRSN_START_DTE AND PRICES.VRSN_END_DTE=UPDATE_TEMP.VRSN_END_DTE
;

-- To delete intersecting rows
CREATE OR REPLACE TEMPORARY TABLE DELETE_TEMP
AS
(
WITH
	sub_query
AS
(
	SELECT  *,
			RANK() OVER( PARTITION BY MATNR_A921 ORDER BY VRSN_START_DTE, VRSN_END_DTE) AS r
	FROM  PRICES
)
SELECT
	DISTINCT sub_query_2.MATNR_A921,
	sub_query_2.VRSN_START_DTE,
	sub_query_2.VRSN_END_DTE
FROM
	sub_query AS sub_query_1
JOIN
	sub_query AS sub_query_2
ON  sub_query_1.MATNR_A921 = sub_query_2.MATNR_A921 AND sub_query_1.r!=sub_query_2.r
AND (
	sub_query_1.VRSN_START_DTE >= sub_query_2.VRSN_START_DTE AND
	sub_query_1.VRSN_END_DTE <= sub_query_2.VRSN_END_DTE
	)
);

--Delete temp table data if same version start date row exist
DELETE FROM PRICES
WHERE (PRICES.MATNR_A921, PRICES.VRSN_START_DTE, PRICES.VRSN_END_DTE)
IN (SELECT  (DELETE_TEMP.MATNR_A921,DELETE_TEMP.VRSN_START_DTE,DELETE_TEMP.VRSN_END_DTE) FROM DELETE_TEMP)
;

-- To get the values from the table A910_CV,KONP_CV
-- To get only PD Charge back cost
CREATE OR REPLACE TEMPORARY TABLE PD_TEMP
AS
(
SELECT
		A.MATNR,
		SAFE_CAST(A.DATAB AS DATE FORMAT 'YYYYMMDD')  AS VRSN_START_DTE,
			SAFE_CAST(A.DATBI AS DATE FORMAT 'YYYYMMDD')  AS VRSN_END_DTE,
		CASE WHEN A.SPART = '10'  AND B.KBETR IS NOT NULL THEN B.KBETR
		ELSE
		-1
		END
		AS PD

	FROM `PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__A910_CV` A
  --FROM `PROJECT_ID.VI0_PHM_ORP_PE1_PH1_NP.A910_CV` A
	JOIN `PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__KONP_CV` B ON A.KNUMH = B.KNUMH
	WHERE A.KSCHL IN ('ZBA7') --Chargeback cost
  AND
	A.VKORG = '2220' AND VTWEG = '10' AND SPART IN ('10')
	-- AND A.MATNR in ('000000000004570305')
	ORDER BY 1,2
);

-- To get the values from the table A910_CV,KONP_CV
-- To get only KINRAY Charge back cost
CREATE OR REPLACE TEMPORARY TABLE KNRY_TEMP
AS
(
SELECT
		A.MATNR,
		SAFE_CAST(A.DATAB AS DATE FORMAT 'YYYYMMDD')  AS VRSN_START_DTE,
			SAFE_CAST(A.DATBI AS DATE FORMAT 'YYYYMMDD')  AS VRSN_END_DTE,
		CASE WHEN A.SPART = '30'  AND B.KBETR IS NOT NULL THEN B.KBETR
		ELSE
		-1
		END  AS KNRY,
	FROM `PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__A910_CV` A
  --FROM `PROJECT_ID.VI0_PHM_ORP_PE1_PH1_NP.A910_CV` A
	JOIN `PROJECT_ID.VI2_PHM_CONFDIM_MATERIAL.PHM_ORP_PE1_PH1__KONP_CV` B ON A.KNUMH = B.KNUMH
	WHERE A.KSCHL IN ('ZBA7') --Chargeback cost
  AND
	A.VKORG = '2220' AND VTWEG = '10' AND SPART IN ('30')
	-- AND A.MATNR in ('000000000004570305')
	ORDER BY 1,2
);

--Join PD and KINRAY
CREATE OR REPLACE TEMPORARY TABLE CGBK_COST_TEMP
AS
(
	SELECT
		CASE WHEN A.MATNR IS NOT NULL THEN A.MATNR
		ELSE
		B.MATNR
		END AS MATNR,
		CASE WHEN A.VRSN_START_DTE IS NULL THEN B.VRSN_START_DTE
			WHEN B.VRSN_START_DTE IS NULL THEN A.VRSN_START_DTE
			ELSE
			IF ((A.VRSN_START_DTE > B.VRSN_START_DTE) , A.VRSN_START_DTE , B.VRSN_START_DTE)
		END AS VRSN_START_DTE,
		CASE WHEN A.VRSN_END_DTE IS NULL THEN B.VRSN_END_DTE
			WHEN B.VRSN_END_DTE IS NULL THEN A.VRSN_END_DTE
			ELSE
			IF ((A.VRSN_END_DTE < B.VRSN_END_DTE) , A.VRSN_END_DTE , B.VRSN_END_DTE)
		END AS VRSN_END_DTE,
		A.PD,
		B.KNRY
	FROM PD_TEMP   A
	FULL OUTER JOIN KNRY_TEMP  B ON A.MATNR = B.MATNR
	AND A.VRSN_START_DTE <= B.VRSN_END_DTE AND A.VRSN_END_DTE >= B.VRSN_START_DTE
	ORDER BY 1,2
);

-- Join A921 and A920 table
--Get order of record
CREATE OR REPLACE TEMPORARY TABLE PRICE_CHARGE_BACK_TEMP
AS
(
WITH PRICE_CGBK_TEMP AS
(
SELECT
		PRI.MATNR_A921,
		PRI.VRSN_START_DTE AS PRI_VRSN_START_DTE,
		PRI.VRSN_END_DTE AS PRI_VRSN_END_DTE,
		PRI.ZBA0,
		PRI.ZBA2,
		PRI.ZTF0,
		PRI.ZREF,
		PRI.ZMSR,
		CGBK.VRSN_START_DTE AS CGBK_VRSN_START_DTE,
		CGBK.VRSN_END_DTE AS CGBK_VRSN_END_DTE,
		CGBK.PD,
		CGBK.KNRY,
		PRI.ZBA0_CRT_DTE,
		PRI.ZBA2_CRT_DTE,
		PRI.ZTF0_CRT_DTE,
		PRI.ZREF_CRT_DTE,
		PRI.ZMSR_CRT_DTE,
		CASE
			WHEN (PRI.VRSN_START_DTE >= CGBK.VRSN_START_DTE
			AND PRI.VRSN_END_DTE <= CGBK.VRSN_END_DTE)
			OR CGBK.MATNR IS NULL THEN TRUE
		ELSE FALSE
	END AS exact_match
FROM
	PRICES PRI
LEFT JOIN CGBK_COST_TEMP CGBK ON
	PRI.MATNR_A921 = CGBK.MATNR
	AND PRI.VRSN_START_DTE <= CGBK.VRSN_END_DTE
	AND PRI.VRSN_END_DTE >= CGBK.VRSN_START_DTE
),
--rows for exact match
FINAL AS (
SELECT
	MATNR_A921,
	PRI_VRSN_START_DTE AS VRSN_START_DTE,
	PRI_VRSN_END_DTE AS VRSN_END_DTE,
	ZBA0,
	ZBA2,
	ZTF0,
	ZREF,
	ZMSR,
	PD,
	KNRY,
	ZBA0_CRT_DTE,
	ZBA2_CRT_DTE,
	ZTF0_CRT_DTE,
	ZREF_CRT_DTE,
	ZMSR_CRT_DTE
FROM
	PRICE_CGBK_TEMP
WHERE
	PRICE_CGBK_TEMP.exact_match IS TRUE
UNION ALL
-- upper values of split
SELECT
	MATNR_A921,
	PRI_VRSN_START_DTE AS VRSN_START_DTE,
	CASE
		WHEN PRI_VRSN_END_DTE >= CGBK_VRSN_START_DTE
		AND PRI_VRSN_END_DTE < CGBK_VRSN_END_DTE THEN CGBK_VRSN_START_DTE - 1
		WHEN PRI_VRSN_END_DTE > CGBK_VRSN_END_DTE THEN CGBK_VRSN_END_DTE
		ELSE PRI_VRSN_END_DTE
	END AS VRSN_END_DTE ,
	ZBA0,
	ZBA2,
	ZTF0,
	ZREF,
	ZMSR,
	CASE
		WHEN PRI_VRSN_END_DTE >= CGBK_VRSN_START_DTE
		AND PRI_VRSN_END_DTE < CGBK_VRSN_END_DTE THEN NULL
		ELSE PD
	END AS PD,
	CASE
		WHEN PRI_VRSN_END_DTE >= CGBK_VRSN_START_DTE
		AND PRI_VRSN_END_DTE < CGBK_VRSN_END_DTE THEN NULL
		ELSE KNRY
	END AS KNRY,
	ZBA0_CRT_DTE,
	ZBA2_CRT_DTE,
	ZTF0_CRT_DTE,
	ZREF_CRT_DTE,
	ZMSR_CRT_DTE

FROM
	PRICE_CGBK_TEMP
WHERE
	PRICE_CGBK_TEMP.exact_match IS FALSE
UNION ALL
-- lower values of split
SELECT
	MATNR_A921,
	CASE
		WHEN PRI_VRSN_START_DTE >= CGBK_VRSN_END_DTE THEN (CGBK_VRSN_END_DTE + 1)
		WHEN PRI_VRSN_START_DTE >= CGBK_VRSN_START_DTE THEN PRI_VRSN_START_DTE
		ELSE CGBK_VRSN_START_DTE
	END AS VRSN_START_DTE,
	PRI_VRSN_END_DTE AS VRSN_END_DTE,
	ZBA0,
	ZBA2,
	ZTF0,
	ZREF,
	ZMSR,
	CASE
	WHEN PRI_VRSN_START_DTE >= CGBK_VRSN_END_DTE THEN NULL
	ELSE PD
	END AS PD,
	CASE
	WHEN PRI_VRSN_START_DTE >= CGBK_VRSN_END_DTE THEN NULL
	ELSE KNRY
	END AS KNRY,
	ZBA0_CRT_DTE,
	ZBA2_CRT_DTE,
	ZTF0_CRT_DTE,
	ZREF_CRT_DTE,
	ZMSR_CRT_DTE
FROM
	PRICE_CGBK_TEMP
WHERE
	PRICE_CGBK_TEMP.exact_match IS FALSE
ORDER BY
	2,
	3
)
SELECT

MATNR_A921,
VRSN_START_DTE,
VRSN_END_DTE,
ZBA0,
ZBA2,
ZTF0,
ZREF,
ZMSR,
sum(PD) AS  PD,
sum(KNRY) AS KNRY,
ZBA0_CRT_DTE,
	ZBA2_CRT_DTE,
	ZTF0_CRT_DTE,
	ZREF_CRT_DTE,
	ZMSR_CRT_DTE
FROM FINAL
GROUP BY 1,2,3,4,5,6,7,8,11,12,13,14,15
ORDER BY 2
);

-- To delete intersecting rows
CREATE OR REPLACE TEMPORARY TABLE DELETE_TEMP1
AS
(
WITH
	sub_query
AS
(
	SELECT  *,
			RANK() OVER( PARTITION BY MATNR_A921 ORDER BY VRSN_START_DTE, VRSN_END_DTE) AS r
	FROM  PRICE_CHARGE_BACK_TEMP
)
SELECT
	DISTINCT sub_query_2.MATNR_A921,
	sub_query_2.VRSN_START_DTE,
	sub_query_2.VRSN_END_DTE
FROM
	sub_query AS sub_query_1
JOIN
	sub_query AS sub_query_2
ON  sub_query_1.MATNR_A921 = sub_query_2.MATNR_A921 AND sub_query_1.r!=sub_query_2.r
AND (
	sub_query_1.VRSN_START_DTE >= sub_query_2.VRSN_START_DTE AND
	sub_query_1.VRSN_END_DTE <= sub_query_2.VRSN_END_DTE
	)
);

DELETE FROM PRICE_CHARGE_BACK_TEMP
WHERE (PRICE_CHARGE_BACK_TEMP.MATNR_A921, PRICE_CHARGE_BACK_TEMP.VRSN_START_DTE, PRICE_CHARGE_BACK_TEMP.VRSN_END_DTE)
IN (SELECT  (DELETE_TEMP1.MATNR_A921,DELETE_TEMP1.VRSN_START_DTE,DELETE_TEMP1.VRSN_END_DTE) FROM DELETE_TEMP1)
;

--SELECT * FROM PRICES ORDER BY MATNR_A921,VRSN_START_DTE;
CREATE OR REPLACE TEMPORARY TABLE MATERIAL_PRICING_TEMP
AS
(
WITH PRC_RANK AS
(
SELECT
	PRI.MATNR_A921,
	-- If ((MAT.VRSN_START_DTE > PRI.VRSN_START_DTE) , MAT.VRSN_START_DTE , PRI.VRSN_START_DTE)  AS VRSN_START_DTE,
	-- IF ((MAT.VRSN_END_DTE < PRI.VRSN_END_DTE) , MAT.VRSN_END_DTE , PRI.VRSN_END_DTE) AS VRSN_END_DTE,
	PRI.VRSN_START_DTE,
	PRI.VRSN_END_DTE,
	PRI.ZBA0 AS ZBA0,
	PRI.ZBA2 AS ZBA2,
	PRI.ZTF0 AS ZTF0,
	PRI.ZREF AS ZREF,
	PRI.ZMSR AS ZMSR,
	(CASE WHEN MAT.PRICE_USAGE_LKP_ID = 'ZDIS' THEN PRI.ZBA2 + PRI.ZTF0 ELSE PRI.ZBA0 + PRI.ZTF0 END) AS CALC_CORP_NIFO_AMT,
	CASE
	WHEN  (PRI.PD IS NULL AND MAT.PRICE_USAGE_LKP_ID='ZDIS') THEN PRI.ZBA2
	WHEN  (PRI.PD IS NULL AND MAT.PRICE_USAGE_LKP_ID<>'ZDIS') THEN PRI.ZBA0
	WHEN PRI.PD IS NOT NULL THEN PRI.PD
	END AS PD_CGBK_COST_AMT  ,
	CASE
	WHEN  (PRI.KNRY IS NULL AND MAT.PRICE_USAGE_LKP_ID='ZDIS') THEN PRI.ZBA2
	WHEN  (PRI.KNRY IS NULL AND MAT.PRICE_USAGE_LKP_ID<>'ZDIS') THEN PRI.ZBA0
	WHEN PRI.KNRY IS NOT NULL THEN PRI.KNRY
	END AS KNRY_CGBK_COST_AMT ,
	(CASE WHEN MAT.PRICE_USAGE_LKP_ID = 'ZDIS' THEN PRI.ZBA2 ELSE PRI.ZBA0 END) AS CALC_BASE_COST_AMT,
	MAT.PRICE_USAGE_LKP_ID,
	PRI.ZBA0_CRT_DTE,
	PRI.ZBA2_CRT_DTE,
	PRI.ZTF0_CRT_DTE,
	PRI.ZREF_CRT_DTE,
	PRI.ZMSR_CRT_DTE
	-- MAT.VRSN_START_DTE AS MAT_VRSN_START_DTE,
	-- MAT.VRSN_END_DTE AS MAT_VRSN_END_DTE

FROM PRICE_CHARGE_BACK_TEMP PRI
INNER JOIN
(SELECT DISTINCT MTRL_NUM,VRSN_START_DTE,VRSN_END_DTE,PRICE_USAGE_LKP_ID
FROM
`PROJECT_ID.VW_PHM_CONFDIM_MATERIAL.MATERIAL_CV` WHERE CURR_VRSN_FLG = 'Y' ) MAT ON MAT.MTRL_NUM = PRI.MATNR_A921
AND PRI.VRSN_START_DTE <= MAT.VRSN_END_DTE AND PRI.VRSN_END_DTE >= MAT.VRSN_START_DTE
),

PRC_RANK_1 AS
(
	SELECT
		MATNR_A921,
		VRSN_START_DTE,
		VRSN_END_DTE,
		ZBA0 AS ZBA0_KBETR_KONP,
		ZBA2 AS ZBA2_KBETR_KONP,
		ZTF0 AS ZTF0_KBETR_KONP,
		ZREF AS ZREF_KBETR_KONP,
		ZMSR AS ZMSR_KBETR_KONP,
		CALC_CORP_NIFO_AMT,
		LEAD(PRI.ZBA0, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_ZBA0_KBETR_KONP,
		LEAD(PRI.ZBA2, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_ZBA2_KBETR_KONP,
		LEAD(PRI.ZTF0, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_ZTF0_KBETR_KONP,
		LEAD(PRI.ZREF, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_ZREF_KBETR_KONP,
		LEAD(PRI.ZMSR, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_ZMSR_KBETR_KONP,
		PD_CGBK_COST_AMT,
		KNRY_CGBK_COST_AMT,
		LEAD(PRI.PD_CGBK_COST_AMT, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_PD_ZBA7_KBETR_KONP,
		LEAD(PRI.KNRY_CGBK_COST_AMT, 1,0) OVER(PARTITION BY PRI.MATNR_A921 ORDER BY PRI.VRSN_START_DTE DESC) AS CALC_PREV_KNRY_ZBA7_KBETR_KONP,
		CALC_BASE_COST_AMT,
		PRICE_USAGE_LKP_ID,
		PRI.ZBA0_CRT_DTE,
		PRI.ZBA2_CRT_DTE,
		PRI.ZTF0_CRT_DTE,
		PRI.ZREF_CRT_DTE,
		PRI.ZMSR_CRT_DTE

FROM PRC_RANK PRI
)
	SELECT
		MATNR_A921,
		VRSN_START_DTE,
		VRSN_END_DTE,
		CASE WHEN CURRENT_DATE BETWEEN VRSN_START_DTE AND VRSN_END_DTE THEN 'Y' ELSE 'N' END AS CURR_VRSN_FLG,

		ZBA0_KBETR_KONP,
		ZBA2_KBETR_KONP,
		ZTF0_KBETR_KONP,
		ZREF_KBETR_KONP,
		ZMSR_KBETR_KONP,
		CALC_CORP_NIFO_AMT,
		CALC_PREV_ZBA0_KBETR_KONP,
		CALC_PREV_ZBA2_KBETR_KONP,
		CALC_PREV_ZTF0_KBETR_KONP,
		CALC_PREV_ZREF_KBETR_KONP,
		CALC_PREV_ZMSR_KBETR_KONP,
		(CASE WHEN PRICE_USAGE_LKP_ID = 'ZDIS' THEN CALC_PREV_ZBA2_KBETR_KONP + CALC_PREV_ZTF0_KBETR_KONP
		ELSE
		CALC_PREV_ZBA0_KBETR_KONP + CALC_PREV_ZTF0_KBETR_KONP
		END)
		AS CALC_PREV_CORP_NIFO_AMT,
		PD_CGBK_COST_AMT,
		KNRY_CGBK_COST_AMT,
		CALC_PREV_PD_ZBA7_KBETR_KONP,
		CALC_PREV_KNRY_ZBA7_KBETR_KONP,
		CALC_BASE_COST_AMT,
		(CASE WHEN PRICE_USAGE_LKP_ID = 'ZDIS'  THEN CALC_PREV_ZBA2_KBETR_KONP
		ELSE
		CALC_PREV_ZBA0_KBETR_KONP
		END) AS CALC_PREV_BASE_COST_AMT,
		ZBA0_CRT_DTE,
		ZBA2_CRT_DTE,
		ZTF0_CRT_DTE,
		ZREF_CRT_DTE,
		ZMSR_CRT_DTE,
		(CASE WHEN PRICE_USAGE_LKP_ID = 'ZDIS'  THEN ZBA2_CRT_DTE
		ELSE
		ZBA0_CRT_DTE
		END) AS CALC_CORP_NIFO_CRT_DTE,
		v_start_stp AS ROW_ADD_STP,
		v_stored_proc_name AS ROW_ADD_USER_ID,
		v_start_stp AS ROW_UPDATE_STP,
		v_stored_proc_name AS ROW_UPDATE_USER_ID

FROM PRC_RANK_1
ORDER BY 1, 2);

--TRUNCATE the table
TRUNCATE TABLE `PROJECT_ID.D1_PHM_CONFDIM_MATERIAL.MATERIAL_PRICING_VF`;

INSERT INTO `PROJECT_ID.D1_PHM_CONFDIM_MATERIAL.MATERIAL_PRICING_VF`
SELECT
MATNR_A921,
		VRSN_START_DTE,
		VRSN_END_DTE,
		CURR_VRSN_FLG,
		ZBA0_KBETR_KONP,
		ZBA2_KBETR_KONP,
		ZTF0_KBETR_KONP,
		ZREF_KBETR_KONP,
		ZMSR_KBETR_KONP,
		CALC_CORP_NIFO_AMT,
		CALC_PREV_ZBA0_KBETR_KONP,
		CALC_PREV_ZBA2_KBETR_KONP,
		CALC_PREV_ZTF0_KBETR_KONP,
		CALC_PREV_ZREF_KBETR_KONP,
		CALC_PREV_ZMSR_KBETR_KONP,
		CALC_PREV_CORP_NIFO_AMT,
		PD_CGBK_COST_AMT,
		KNRY_CGBK_COST_AMT,
		CALC_PREV_PD_ZBA7_KBETR_KONP,
		CALC_PREV_KNRY_ZBA7_KBETR_KONP,
		CALC_BASE_COST_AMT,
		CALC_PREV_BASE_COST_AMT,
		ZBA0_CRT_DTE,
		ZBA2_CRT_DTE,
		ZTF0_CRT_DTE,
		ZREF_CRT_DTE,
		ZMSR_CRT_DTE,
		CALC_CORP_NIFO_CRT_DTE,
		ROW_ADD_STP,
		ROW_ADD_USER_ID,
		ROW_UPDATE_STP,
		ROW_UPDATE_USER_ID
FROM MATERIAL_PRICING_TEMP;

END;